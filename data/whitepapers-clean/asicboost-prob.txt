Recently there has been a lot of interesting material coming out regarding ASICBOOST.
ASICBOOST is a mining optimization that allows one to mine many times faster by taking advantage of a quirk of SHA-256.
There are multiple ways of implementing ASICBOOST, and recent claims are that one which is incompatible with upgrading Bitcoin is being used.
I thought it was a bit confusing, so I hand wrote some notes for myself.
They became somewhat popular, so I decide (by popular request) to LATEX them.
ASICBOOST takes advantage of the following reductions in work if you modify the first or second half of the header only.
In the following diagrams, I’ve blacked out parts that aren’t recomputed.
Modifying Chunk 1 Only Modifying only chunk 1 gives a small improvement.
The Merkle root commitment is in both chunk 1 and chunk 2.
The first 28 Bytes are in chunk 1, the remaining 4 bytes are in chunk 2.
3.1.1  What is in the Merkle root?  At each level, the hash of the concatenated strings is computed.
Each letter A through H is the hash of a transaction.
The node ABCDEF GH is called the merkle root.
If any of the underlying data A .
H are either modified or reordered, the Merkle root will have a different value (uniformly random).
What if we find two merkle roots with the same last 4 bytes?  Now we can run our very efficient algorithm to only modify chunk 2 on many precomputed chunk 1s.
So now for a little extra setup work, we get a 2× hash rate multiplier for every nonce we try in chunk 2.
The below diagram shows the part that doesn’t need to be recomputed.
If we find N chunk 1s, we can use the same trick for an N × hash rate multiplier.
As explained by Amdahl’s Law1 and due to Bitcoin’s Proof-of-Work being double-SHA-256, the actual measured hash rate increase using this technique will not be as pronounced.
How do we generate colliding (in the last 4 bytes) transaction tree Merkle commitments efficiently?  The Birthday Paradox says that if 23 people are in a room, there is a 50% chance that at least two people share a birthday.
This is the same problem as our tree collision, but with different numbers.
It works because as the number of people increases, the number of independent chances of sharing a birthday increases more quickly.
You can visualize this as counting the number of connections in the following graphs.
These represent independent chances to share a birthday between nodes.
A general closed formula for computing the number E of entries of T types needed to be P probable to have a C-way collision is hard to find, but the following approximation works well as an upper bound2 .
It’s clear that the key in collision hunting is to store and generate a large number of potential matches to compare against.
The probability of a collision becomes very likely even with a large set of possible “birthdays” (T ), and relatively small numbers of “people” (E).
Using our formula, for 4 bytes of potential “birthdays”, at 110k “people”, the probability of a shared “birthday” is more than 75%.
We can generate a unique Merkle tree by changing one of the base nodes.
The non-blacked out boxes all need to be recomputed when changing C → C 0 .
Let m be the number of leaf nodes, the naive algorithm requires O(N log m) hashes.
Instead, we could do higher-order permutations.
Now we only need to do one re-computation to get a second potential match.
If we black out the ones that don’t need recomputing we see clearly this is better  In the naive version, each new potential match is expensive to compute.
In the smarter version, we can recursively apply this principle to very efficiently generate potential matches.
There are several strategies for generating candidates, not just swapping.
Swapping isn’t optimal because Bitcoin transactions have order dependencies.
Most likely, miners are not using permutation.
Permutation is demonstrative of the principles at play.
The next section covers a more efficient algorithm.
Let’s say we want to generate R collisions, and the birthday paradox says it is likely with N hashes.
First, we generate N unique left  hand sides and N unique right hand sides.
With our N Aα s and Bβ s, we can generate N candidates by combining each Aα with each Bβ .
The diagram below illustrates the combination process.
We can apply this recursvely: to generate N Aα s, we generate N left hand sides and right hand sides.
In the base case, we can modify a single transaction or swap two trivially independent transactions to generate a unique parent.
This algorithm uses Θ(N ) work.
This is optimal (for this component of the algorithm), because we need to produce N hashes.
Our earlier approximation predicts that in order to be likely to produce a 4-way collision we need to generate around 225 hashes, and store them for collision detection.
This is about a gigabytes worth, so most computers should be able to generate this quickly.
A 5-way and greater, the amount of time required to generate a collision will increase markedly, but I would imagine that miners with ASICBOOST would not want to use that, and prefer to generate many 4-way collisions with rolled coinbase extra-nonces.
In SegWit we generate an additional commitment of all the signatures and we put it into the coinbase transaction.
This commits to which transactions are present in the block and in what order they appear, which means no more easy generation of unique Merkle roots; the commitment is in the leftmost transaction, so modifying the order or contents of any transaction triggers a full a factor of log m rehash.
The figures below demonstrates this.
A commits to BCDEF GH.
Any change in the order or contents of the tree triggers the update to A’s nested commitment, which also triggers an update to ABCDEF GH.
Note the direction of the arrows for the witness commitment3 .
Technically, A is put into the witness tree with a zero value so the structure of the tree is identical.
Representing this would make this diagram less clear, because no data from A is committed to.
Are SegWit and ASICBOOST are fundamentally incompatible?  No.
The version field can be used to make “collisions” trivialy! Simply set it to a different value.
Why go through the trouble of finding non-trivial collisions?  • Changing versions is easy to detect..