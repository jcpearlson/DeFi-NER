A Key Backup Scheme Based on Bitcoin  Abstract.
Since first introduced by Satoshi Nakamoto in 2008, Bitcoin has become the biggest and most well-known decentralized digital currency.
Its anonymity allows users all over the world to make transactions with each other and keep their identities hidden.
However, protecting private key becomes a very important issue because it is the only access to a unique account and can hardly be recovered if missing.
Storing an encrypted backup of private key and its corresponding advanced key is a traditional but effective way, and many other techniques help to make the backup harder to obtain by attackers.
While in this paper, we introduce a new backup scheme that can provide protection when an attacker manages to obtain the backup.
It is based on Bitcoin system and ECDSA signature scheme.
The biggest difference is the generation and recovery of the backup processes are both related with some specific transactions on blockchain, thus it creates a gap for legal users and attackers who manages to obtain backup to recover key.
The gap is decided by the number of accounts and transactions on the blockchain which increases rapidly with the growth of Bitcoin’s popularity and therefore strengthens the security of our scheme at the same time.
What’s more, our technique can also be combined with former ones to achieve better security.
Since first introduced by Satoshi Nakamoto in 2008 [15], Bitcoin has attracted billions of dollar economy and also provides a new method in studying decentralized digital currency.
Different from traditional electronic cash schemes, Bitcoin uses a proof-of-work technique instead of a trusted center and realizes a transaction protocol on a distributed network.
Based on Bitcoin’s architecture, many other proof-of-work schemes or Bitcoin-like distributed consensus schemes have been proposed.
However, Bitcoin is still the biggest and the most well-known system among these schemes, the research on it is of representative significance.
Bitcoin is welcomed all over the world because of its anonymity and decentralization, however, these features also bring a new challenge about protecting private key.
A private key is the only available access to the corresponding account which is randomly generated by the user.
Once the private key is missing because of hardware errors, oblivion or malicious attacks, the corresponding account would be unavailable because recovering private key from the public key is computationally infeasible.
For a traditional centralized digital currency, an authority center may help by verifying the user’s identity and retrieving the loss, but that is not the case for a decentralized system such as Bitcoin, thus protecting private key becomes one of the important issues in Bitcoin research.
Creating a backup copy of the encrypted private key and either delegating it to a trusted third party or storing it in an offline device is a traditional but useful way.
Besides, some other techniques can be used to play a subsidiary role, such as Mnemonic Code Technique Secret Sharing Technique and DSS Attack Technique of Bellare et al..
Mnemonic Code Technique is first introduced in BIP-0039 [13], the idea of Mnemonic Code Technique is to establish a deterministic bijection between a wallet seed and a group of words that are easy to be remembered.
By remembering these understandable words instead of dealing with a serial of binary or hexidecimal representations, users are likely to remember their secrets more easily.
And these understandable words become a natural backup of the corresponding private key.
While a (t, n)-threshold Secret Sharing Scheme is to share a secret among n participants where no less than t participants can reconstruct the secret and any t or more participants can work together to recover the full secret.
With Secret Sharing Technique, users can split their private key into several pieces and store them in different third parties.
If the majority of these third parties are believable, the users’ private keys are well-protected and can be recovered when missing.
This technique was first introduced independently by Shamir and Blakley, Shamir’s scheme [1] was based on Lagranges interpolation and Blakley’s scheme [10] was based on hyperplane geometry.
Since then, Secret Sharing Technique has been extended to Bitcoin such as threshold signature [7].
DSS Attack Technique of Bellare et al.
is introduced in 1997 [4], which provides an attack method to recover private key through a few signatures when the random integer, denoted as nonce k, is generated by Knuths linear congruential generator.
Though it is used as an attack method, it reveals a relationship among signature, nonce and private key.
In this paper, we propose a new Bitcoin key backup strategy which is based on the structure of Elliptic Curve Digital Signature Algorithm(ECDSA) and Bitcoin system.
In this backup scheme, a user can generate a backup by his private key, and the backup is restricted with a transaction signed by the user himself on the blockchain.
When the private key is missing, he can recover his private key within t trials at the worst case where t denotes the number of transactions signed with the corresponding private key on the blockchain.
On the other hand, however, when an attacker manages to know the backup pair, he should perform T trials at the worst case before he gets the correct private key where T denotes the number of all transactions on the blockchain.
In this way, our backup strategy can provide a better security than former backup strategies when the backup is obtained by an attacker, furthermore, this backup strategy can also be extended with some techniques, such as Mnemonic Code Technique and DSS Attack Technique of Bellare et al., to fulfill higher security requirements.
Former researches mainly concentrate on how to make it harder for attackers to obtain the secret (once obtained the private key is revealed), such as hardware wallet, paper wallet (write down the secret on paper and store it in a safe), brain wallet (memorizing a passphrase in head which can be transformed into the secret) and threshold signatures [7], while the idea behind our scheme is to generate a gap between the time for a legal user and the time for an attacker to recover the private key.
The gap which enlarges with the growth of the number of transaction on Bitcoin is the guarantee of our scheme’s secutiry.
Besides, our scheme can be easily combined with former techniques to make both the obtain of the backup and the recovery of the secret hard for an attacker, thus provides a better security.
Our contribution mainly contains three parts.
We first propose a new Bitcoin key backup scheme that can provide better security under the condition that the backup is obtained by an attacker.
Secondly, we extend the scheme with several existing techniques and make it more secure and simpler to store.
Thirdly, we also make an analysis about these schemes to show their security and effectiveness.
The rest of the paper is organized as follows.
In section 2, we introduce the background about Bitcoin and ECDSA.
Then we provide the Bitcoin key backup scheme in section 3 followed with its analysis.
And we provide some extensions with better security and simpler storage combined with analysis in section 4.
Finally, a conclusion is given in section 5.
First introduced by Satoshi Nakamoto in 2008 [15], Bitcoin provides a decentralized electronic cash system that solves double-spending problem by using a peer-to-peer network instead of relying on a trusted third party.
Transactions in Bitcoin system are recorded as a chain of digital signatures known as blockchain.
Each transaction is made up of the fixed structure where an owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin (Bitcoin uses double SHA-256 as the hash function for signature).
To generate a block containing several transactions, a proof-of-work system is used which demands participants to solve a special problem decided by these transactions, and only the longest chain will be recognized as proof of the sequence of events witnessed, thus the system is secure if a majority of CPU power is controlled by honest nodes.
The proof-of-work system works better to prevent Sybil attacks basing on the assumption that it is much harder to control the majority of the computation power in the system than to control the majority of identities.
Besides, transactions are all public and arbitrary number of key pairs can be generated by users, the gap between identities and arbitrarily generated accounts is the key to protect privacy.
These features make Bitcoin become the biggest and the most well-known decentralized electronic cash system which attracts billions of dollar economy and attentions of many researchers, including decentralization [2], double spending attacks [11, 12] and prevention [3, 8].
Elliptic Curve Digital Signature Algorithm is the digital signature system used in Bitcoin.
It is first introduced in 2001 [9].
An ECDSA contains following parameters: a suitably chosen elliptic curve E defined over a finite field Fq of characteristic p, an indication field representation of the representation used for the elements of Fq denoted as F R, a base point G ∈ E(Fq ), two field elements a and b in Fq which decide the equation of the elliptic curve E over Fq (by an equation of the form y 2 = x3 + ax + b), the order n of the point G and the cofactor h = #E(Fq )/n.
And in Bitcoin system, these parameters are fixed as secp256k1.
It also should be noted that in Bitcoin system, the public key of a receiver of a transaction is not included directly in a transaction message but its transformation form instead (the public key first goes through SHA-256, then RIPEMD-160, appended by a version number and checksum, denoted as address).
However, if the receiver starts a new transaction later, he should provide his public key to prove his ownership.
This design is used to obfuscate and shorten public key and it does not affect the process of signature, so we will not distinguish between public key and address in this paper to facilitate the narrative.
The problem is to recover the private key d without knowing k1 , k2 .
If m = n, the problem is easy to solve by linear algebra.
And for m 6= n, Bellare et al.
solved them by the following steps:  3.
Apply Babai’s nearest lattice vector algorithm on L(B) with the target vectors of the form Y = (Hash(m1 ), Hash(m2 ), bm , x0 /γx , k10 /γk1 , k20 /γk2 )T where the first three elements of Y, (Hash(m1 ), Hash(m2 ), bm ), are fixed and the last three, (x0 /γx , k10 /γk1 , k20 /γk2 ), will be enumerated by choosing different (x0 , k10 , k20 ) to find a vector on L(B) which is close to these Y.
Obtain the result vector of the form X = (Hash(m1 ), Hash(m2 ), bm , x/γx , k1 /γk1 , k2 /γk2 )T , accept it if the x is the desired solution for d, otherwise, redefine the range of x0 as [1, x − 1] and [x, n − 1], then goto 1.
The expected number of false solutions obtained by the method is proved to be less than mn−1 .
When m and n have the same size (i.e., 1/2 < m/n < 2), one can get the right private key in about two rounds with high probability.
3  Bitcoin Key Backup Scheme  In this section, we introduce our key backup scheme which provides a new solution for recovering Bitcoin missing keys which are in ECDSA form, the scheme is based on the signature vulnerability described in Section 2.
3.1  Basic Scheme  Backup Generation.
In our basic scheme, Alice with a Bitcoin key pair (P KA , SKA ) can set up a key backup through following steps:   The wrong ki0 will not lead to a right x̄i which satisfies x̄i = ri thus will not return a SKA successfully.
As a result, each round of the recover key process requires 2 Hash processes and 1 elliptic multiply process regardless of basic number operations, to successfully recover a private key, t rounds of the process shall be needed at the worst case and the recovery process needs to run 2t + 1 Hash processes and t elliptic multiply processes (an extra Hash process is caused by computing the private key and t denotes the number of transactions sponsored by this account).
For any nonce k 0 ∈ [1, n − 1], a corresponding r0 and SKA thus Bob can not get any information about Alice’s account through the key backup pair.
And it is needed for Bob to collect every transaction’s signature on the blockchain and run Key Recover process for each signature at the worst case which costs 2T + 1 Hash processes and T elliptic multiply processes (T denotes the number of transactions on the whole blockchain).
Data obtained from blockchain website(www.blockchain.info) shows that up to July 5th, 2017, the total number of transactions on the blockchain is 2.37×108 (in which 1.42 × 108 are performed by the 100 most popular addresses) and the total number of unique addresses used on the blockchain is 2.16 × 108 .
If we exclude the 100 most popular and inactive addresses (we regard 98.95% of the total addresses as inactive addresses who own less than 0.7% of the whole BTC according to Bitcoin Distribution [5]).
As a result, the average number of transactions made by an account is about (2.37 × 108 − 1.42 × 108 )/(2.16 × 108 × (1 − 98.95%) − 100) ≈ 41.89.
Then we can draw a conclusion that the time for an attacker to recover key from our backup scheme is (2.37 × 108 − 1.42 × 108 )/41.89 ≈ 2.27 × 106 ≈ 221 times more than a legal user takes to do so.
The biggest difference between the proposed scheme and traditional encrypted backup scheme is that the recover process in our scheme is combined with a unique transaction on the blockchain.
If the account to recover is decided, only limited number of trials shall be run and this is often the case for the legal owner because he has a specific target.
However, it is hard to recover the key for an attacker who manages to obtain the backup pair because the anonymity of Bitcoin covers the relationship between users and accounts, and the backup pair does not leak information about accounts.
With the growing number of users and transactions, the gap between a legal owner and an attacker to recover key grows observably.
While for a traditional encrypted backup scheme, it is equally convenient for either legal owner or attacker to recover key from backup pair thus the attacker can get the private key nearly as soon as he obtains the backup pair.
In this section, we introduce several improvements of the above Bitcoin backup scheme which can provide better security and simpler storage.
The difference between this generation process and the former one in the basic scheme is that the nonce k in this process is chosen as the one once used in signing a transaction on the blockchain, as a result, the backup is connected with a transaction signature which is signed earlier than the backup pair generating.
Randomly choosing between these two Backup Generation processes to set up key backup can remove time relationship between the backup generation and the corresponding transaction, and this technique can make the scheme more secure.
As described above, to successfully recover a private key from its backup, one ¯ A , s) as well as its corresponding transaction at needs to obtain the pair (SK the same time.
Transactions can be gained from the blockchain, while the pair ¯ A , s) needs to be stored.
Offline storage is the most secure way, while storing (SK with the help of third parties is less secure but more convenient.
¯ A is used to generate backup In our basic scheme, an advanced private key SK and to recover the private key.
The choice of this advanced private key is with less limit because it is used with its hash form.
However, a weak advanced private key may increase the risk of being attacked while a complex one, i.e.
randomly generated, is hard to remember.
Mnemonic Code Technique can be useful to help generate a pseudorandom advanced private key as well as a mnemonic sentence.
The mnemonic sentence plays the same role as the advanced private key and is much easier to remember.
If users have further requirement about simplifying storage, half part of the backup, says s, can also be deposited to a trusted third party.
However, it is necessary for the user to deposit s with a pseudonym but not with an identification that is related to his account in order to protect his privacy.
The third party has a duty to provide deposited messages to its owner when needed, and this will leads to a successful key recover.
If accident happens, such as an attack or a theft, which causes the leakage of s.
The security of private key is still guaranteed, because for an attacker who obtains s and tries to recover the secret  As a result, the process of recovering key will cost 2256 (T +1) Hash processes and 2256 T elliptic multiply processes at the worst case (T denotes the number of transactions on the blockchain and the output of Hash is considered to be uniformly distributed among 2256 ).
We now made use of the signature vulnerability of ECDSA when signing two messages using the same nonce and establish our backup scheme, is it possible to use different nonce to generate a backup with better security? This doubt leads to a further improvement.
[4] showed that one can recover private key if k is produced by Knuths linear congruential generator with known parameters.
With the help of this technique, we can further improve our backup scheme by using two different nonce in backup generation process.
In our improved scheme, Alice with a Bitcoin key pair (P KA , SKA ) can set up a key backup through the following steps:  The scheme neither changes the signature on transactions nor uses linear congruential generator to generate nonce.
The idea is to compute the relationship between two transactions and transform the problem into the one analysed by Bellare et al.
To recover private key, one should compute about t(t − 1) Hash processes, t(t − 1) elliptic multiply processes and t(t − 1) nearest lattice vector processes (to decide which two of the transactions are related, and the complexity is about t(t − 1)log(n)log 2 (m)).
But for an attacker who manages to obtain am.
According to the former computation, the time for an attacker to recover key from the backup scheme is about (2.27×106 )2 = 5.15×1012 ≈ 242 times more than a legal user takes to do so.
Compared with the basic scheme, the improved scheme needs more computation to recover key from backup but it increases the gap for attacker to calculate at the same time.
Besides, the storage is simplified for the latter one which only needs to store 256 bits.
Moreover, we can extend the updated scheme by increasing the number of transactions which are used to generate backup from two to arbitrary integer c to further improve its security.
To achieve this improvement, a few changes shall be made:  According to the probability analysis of [4], the expected number of false solutions obtained by the method is proved to be less than nc−1 n1−c ≈ 1, which indicates that we can obtain the desire private key with about 2 rounds of computation with high probability.
As described before, a legal user has to determine which c out of t transactions shall be used to recover the backup.
While an attacker who obtains the backup but does not know which account is the target must search c transactions through all blockchain.
In this way, the gap for them to recover key is about (2.27 × 106 )c ≈ 221c which indicates that a proper chosen c will make the computation time for a legal user acceptable while for an attacker computationally infeasible.
In this paper, we introduced a key backup scheme for Bitcoin based on ECDSA signature.
The biggest difference between our scheme and the former ones is that the generation and recovery of backups are bounded with several unique transactions on the blockchain.
The storage of the backup leaks no information about the accounts.
Besides, due to the privacy protection mechanism of Bitcoin, even if an attacker somehow manages to obtain the backup files, it takes much more time for him to recover the key than for a legal user who has a specific aim.
The gap between users and attackers to recover key is decided by the number of accounts and transactions on the blockchain, which means the gap naturally enlarges with the growth of Bitcoin popularity.
Besides, we also provide three improvements to further enhance its security and simplify its storage which indicates that the combination of our scheme and former techniques can make it harder for attackers to obtain backups and to recover private keys at the same time.